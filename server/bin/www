#!/usr/bin/env node
require('dotenv').config();
const path = require('path');

global.DEV_MODE = process.argv[2] === 'dev';
global.RESET_DB = process.argv[3] === 'reset_db';
global.SET_DEMO_DATA = process.argv[4] === 'set_demo_data';
global.PROJECT_DIR = path.join(__dirname, '../../');

[
  'PORT',
  'DB_NAME',
  'DB_USER',
  'DB_PASS',
  'DB_HOST',
  'DB_PORT',
  'ACCESS_CONTROL_ALLOW_ORIGIN',
  'GOOGLE_ID',
  'GOOGLE_SECRET',
  'OAUTH_CALLBACK_URL',
  'SESSION_SECRET',
].forEach((name) => {
  if (process.env[name]) {
    global[name] = process.env[name];
  } else {
    throw new Error(`Required env not defined: ${name}`);
  }
});

const debug = require('debug')('server:server');
const http = require('http');
const app = require('../app');

app.set('port', global.PORT);
const server = http.createServer(app);

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${global.PORT}`
    : `Port ${global.PORT}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  const dev = global.DEV_MODE ? ', in development mode' : ' in production mode';
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Server is listening ${bind}${dev}`);
}

// Listen on provided port, on all network interfaces.
server.listen(global.PORT);
server.on('error', onError);
server.on('listening', onListening);
